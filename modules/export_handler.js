// modules/export.js
(function(global) {
  'use strict';
  
  const ExportHandler = {
    init(recorderState, ui) {
      this.recorderState = recorderState;
      this.ui = ui;
      console.log('ExportHandler initialized');
      return this;
    },
    
    async exportFiles() {
      if (this.recorderState.steps.length === 0) {
        alert('No steps recorded to export!');
        return;
      }
      
      try {
        this.updateStatus('‚è≥ Generating files...', '#d1ecf1', '#0c5460');
        
        // Generate all file contents
        const files = {
          'PageElements.java': this.generatePageElements(),
          'StepDefinitions.java': this.generateStepDefinitions(),
          'UITest.feature': this.generateFeatureFile(),
          'TestRunner.java': this.generateTestRunner(),
          'config.properties': this.generateConfigFile()
        };
        
        // Download files with staggered delays
        let delay = 0;
        for (const [filename, content] of Object.entries(files)) {
          setTimeout(() => this.downloadFile(filename, content), delay);
          delay += 300;
        }
        
        this.updateStatus('‚úÖ Files exported successfully!', '#d4edda', '#155724');
        
        // Show export summary
        this.showExportSummary(Object.keys(files));
        
        // Reset status after 3 seconds
        setTimeout(() => {
          this.updateStatus('Ready to record interactions', '#e2e3e5', '#6c757d');
        }, 3000);
        
      } catch (error) {
        console.error('Export error:', error);
        this.updateStatus('‚ùå Export failed - ' + error.message, '#f8d7da', '#721c24');
      }
    },
    
    updateStatus(message, bgColor, textColor) {
      this.ui.statusBar.style.background = bgColor;
      this.ui.statusBar.style.color = textColor;
      this.ui.statusBar.textContent = message;
    },
    
    showExportSummary(filenames) {
      const summary = `
‚úÖ Successfully exported ${filenames.length} files:

${filenames.map(name => `‚Ä¢ ${name}`).join('\n')}

üìÅ Files saved to your Downloads folder
üöÄ Ready for Selenium automation!
      `.trim();
      
      console.log('Export Summary:\n' + summary);
      
      // Show temporary notification
      this.showNotification('Export Complete!', summary);
    },
    
    showNotification(title, message) {
      const notification = document.createElement('div');
      notification.style.cssText = `
        position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
        background: white; border: 2px solid #667eea; border-radius: 12px;
        padding: 20px; box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        z-index: 2147483648; max-width: 400px; font-family: inherit;
        text-align: center;
      `;
      
      notification.innerHTML = `
        <h3 style="color: #667eea; margin: 0 0 10px 0;">${title}</h3>
        <pre style="white-space: pre-wrap; font-size: 12px; color: #666; margin: 0;">${message}</pre>
        <button onclick="this.parentElement.remove()" style="margin-top: 15px; padding: 8px 16px; background: #667eea; color: white; border: none; border-radius: 6px; cursor: pointer;">OK</button>
      `;
      
      document.body.appendChild(notification);
      
      // Auto-remove after 5 seconds
      setTimeout(() => {
        if (notification.parentElement) {
          notification.remove();
        }
      }, 5000);
    },
    
    generatePageElements() {
      const elementMap = new Map();
      
      // Collect unique elements
      this.recorderState.steps.forEach(step => {
        const elementName = this.generateElementName(step);
        elementMap.set(elementName, step.xpath);
      });

      let javaCode = `package pageObjects;

import org.openqa.selenium.By;

/**
 * Page Elements - Generated by Enhanced Test Automation Recorder
 * Generated on: ${new Date().toISOString()}
 * Total elements: ${elementMap.size}
 */
public class PageElements {
    
`;

      // Sort elements alphabetically for better organization
      const sortedElements = Array.from(elementMap.entries()).sort();
      
      sortedElements.forEach(([elementName, xpath]) => {
        javaCode += `    /** Element: ${elementName} */\n`;
        javaCode += `    public static final By ${elementName} = By.xpath("${xpath}");\n\n`;
      });

      javaCode += `}`;
      return javaCode;
    },
    
    generateStepDefinitions() {
      const stepMethods = new Set();
      const imports = new Set(['io.cucumber.java.en.*', 'org.openqa.selenium.WebDriver', 'org.openqa.selenium.WebElement']);
      
      this.recorderState.steps.forEach(step => {
        const methodName = this.generateMethodName(step);
        const stepDef = this.generateStepDefinition(step, methodName);
        stepMethods.add(stepDef);
        
        // Add imports based on action type
        this.addRequiredImports(step.action, imports);
      });

      let javaCode = `package stepDefinitions;

${Array.from(imports).map(imp => `import ${imp};`).join('\n')}
import pageObjects.PageElements;

/**
 * Step Definitions - Generated by Enhanced Test Automation Recorder
 * Generated on: ${new Date().toISOString()}
 * Total steps: ${this.recorderState.steps.length}
 */
public class StepDefinitions {
    
    private WebDriver driver;
    private WebDriverWait wait;
    private JavascriptExecutor js;
    private Actions actions;
    
    public StepDefinitions(WebDriver driver) {
        this.driver = driver;
        this.wait = new WebDriverWait(driver, Duration.ofSeconds(10));
        this.js = (JavascriptExecutor) driver;
        this.actions = new Actions(driver);
    }
    
`;

      stepMethods.forEach(method => {
        javaCode += method + '\n';
      });

      javaCode += `}`;
      return javaCode;
    },
    
    generateFeatureFile() {
      const stepText = this.ui.stepTextArea.value || 'UI Automation Test';
      const timestamp = new Date().toISOString().split('T')[0];
      
      return `@UITest @Regression
Feature: ${stepText}
  As a user
  I want to perform UI operations on the application
  So that I can accomplish my business tasks
  
  Background:
    Given the application is accessible
    And the user has proper permissions

  Scenario: Recorded user interactions - ${timestamp}
    Given user is on the target page
${this.recorderState.steps.map(step => `    When ${this.generateStepDescription(step)}`).join('\n')}
    Then the operation should complete successfully
    And no errors should be displayed
    
  # Additional test scenarios can be added here
  @SmokeTest
  Scenario Outline: Data-driven test execution
    Given user is on the target page
    When user enters "<username>" in login field
    And user enters "<password>" in password field
    And user clicks login button
    Then user should see dashboard
    
    Examples:
      | username | password |
      | testuser1 | pass123 |
      | testuser2 | pass456 |
`;
    },
    
    generateTestRunner() {
      return `package runner;

import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;
import org.junit.runner.RunWith;

/**
 * Test Runner - Generated by Enhanced Test Automation Recorder
 * Generated on: ${new Date().toISOString()}
 */
@RunWith(Cucumber.class)
@CucumberOptions(
    features = {"src/test/resources/features"},
    glue = {"stepDefinitions"},
    plugin = {
        "pretty",
        "html:target/cucumber-reports/html-report",
        "json:target/cucumber-reports/json-report.json",
        "junit:target/cucumber-reports/junit-report.xml"
    },
    tags = "@UITest",
    monochrome = true,
    publish = true
)
public class TestRunner {
    // Test execution entry point
    // Run this class to execute all feature files
}`;
    },
    
    generateConfigFile() {
      return `# Test Configuration - Generated by Enhanced Test Automation Recorder
# Generated on: ${new Date().toISOString()}

# Browser Configuration
browser=chrome
headless=false
implicit.wait=10
explicit.wait=30

# Application URLs
base.url=https://your-application-url.com
test.url=https://test-environment-url.com

# Selenium Grid (if applicable)
grid.enabled=false
grid.url=http://localhost:4444/wd/hub

# Screenshot settings
screenshot.on.failure=true
screenshot.path=target/screenshots

# Reporting
report.path=target/reports
video.recording=false

# Test Data
test.data.path=src/test/resources/testdata

# Timeouts (in seconds)
page.load.timeout=30
script.timeout=30

# Retry Configuration
retry.count=2
retry.enabled=true
`;
    },
    
    addRequiredImports(action, imports) {
      const actionImports = {
        'sendKeys': ['org.openqa.selenium.support.ui.WebDriverWait', 'org.openqa.selenium.support.ui.ExpectedConditions'],
        'click': ['org.openqa.selenium.support.ui.WebDriverWait', 'org.openqa.selenium.support.ui.ExpectedConditions'],
        'hover': ['org.openqa.selenium.interactions.Actions'],
        'doubleClick': ['org.openqa.selenium.interactions.Actions'],
        'rightClick': ['org.openqa.selenium.interactions.Actions'],
        'dragAndDrop': ['org.openqa.selenium.interactions.Actions'],
        'selectByText': ['org.openqa.selenium.support.ui.Select'],
        'selectByValue': ['org.openqa.selenium.support.ui.Select'],
        'scrollToView': ['org.openqa.selenium.JavascriptExecutor'],
        'waitForElement': ['org.openqa.selenium.support.ui.WebDriverWait', 'org.openqa.selenium.support.ui.ExpectedConditions'],
        'upload': ['java.awt.Robot', 'java.awt.Toolkit', 'java.awt.datatransfer.StringSelection']
      };
      
      if (actionImports[action]) {
        actionImports[action].forEach(imp => imports.add(imp));
      }
      
      // Common imports
      imports.add('java.time.Duration');
    },
    
    generateElementName(step) {
      // Extract meaningful names from XPath patterns
      const xpathPatterns = [
        { pattern: /@placeholder="([^"]+)"/, suffix: 'Field' },
        { pattern: /@aria-label="([^"]+)"/, suffix: 'Element' },
        { pattern: /@name="([^"]+)"/, suffix: 'Element' },
        { pattern: /@data-testid="([^"]+)"/, suffix: 'Element' },
        { pattern: /normalize-space\(text\(\)\)="([^"]+)"/, suffix: 'Button' },
        { pattern: /@type="([^"]+)"/, suffix: 'Input' }
      ];
      
      for (const { pattern, suffix } of xpathPatterns) {
        const match = step.xpath.match(pattern);
        if (match) {
          return this.toCamelCase(match[1]) + suffix;
        }
      }
      
      // Fallback to generic naming
      return `element${step.id}`;
    },
    
    generateMethodName(step) {
      const elementName = this.generateElementName(step);
      const action = step.action.charAt(0).toUpperCase() + step.action.slice(1);
      return `user${action}${elementName.charAt(0).toUpperCase() + elementName.slice(1)}`;
    },
    
    generateStepDefinition(step, methodName) {
      const elementName = this.generateElementName(step);
      
      const stepTemplates = {
        click: {
          annotation: `@When("User clicks on ${elementName}")`,
          signature: `public void ${methodName}()`,
          body: `        WebElement element = wait.until(ExpectedConditions.elementToBeClickable(PageElements.${elementName}));
        element.click();
        System.out.println("Clicked on ${elementName}");`
        },
        sendKeys: {
          annotation: `@When("User enters {string} in ${elementName}")`,
          signature: `public void ${methodName}(String text)`,
          body: `        WebElement element = wait.until(ExpectedConditions.visibilityOfElementLocated(PageElements.${elementName}));
        element.clear();
        element.sendKeys(text);
        System.out.println("Entered text: " + text + " in ${elementName}");`
        },
        clear: {
          annotation: `@When("User clears ${elementName}")`,
          signature: `public void ${methodName}()`,
          body: `        WebElement element = wait.until(ExpectedConditions.visibilityOfElementLocated(PageElements.${elementName}));
        element.clear();
        System.out.println("Cleared ${elementName}");`
        },
        hover: {
          annotation: `@When("User hovers over ${elementName}")`,
          signature: `public void ${methodName}()`,
          body: `        WebElement element = wait.until(ExpectedConditions.visibilityOfElementLocated(PageElements.${elementName}));
        actions.moveToElement(element).perform();
        System.out.println("Hovered over ${elementName}");`
        },
        doubleClick: {
          annotation: `@When("User double clicks on ${elementName}")`,
          signature: `public void ${methodName}()`,
          body: `        WebElement element = wait.until(ExpectedConditions.elementToBeClickable(PageElements.${elementName}));
        actions.doubleClick(element).perform();
        System.out.println("Double clicked on ${elementName}");`
        },
        rightClick: {
          annotation: `@When("User right clicks on ${elementName}")`,
          signature: `public void ${methodName}()`,
          body: `        WebElement element = wait.until(ExpectedConditions.elementToBeClickable(PageElements.${elementName}));
        actions.contextClick(element).perform();
        System.out.println("Right clicked on ${elementName}");`
        },
        scrollToView: {
          annotation: `@When("User scrolls to ${elementName}")`,
          signature: `public void ${methodName}()`,
          body: `        WebElement element = driver.findElement(PageElements.${elementName});
        js.executeScript("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", element);
        System.out.println("Scrolled to ${elementName}");`
        },
        selectByText: {
          annotation: `@When("User selects {string} from ${elementName} dropdown")`,
          signature: `public void ${methodName}(String optionText)`,
          body: `        WebElement element = wait.until(ExpectedConditions.elementToBeClickable(PageElements.${elementName}));
        Select select = new Select(element);
        select.selectByVisibleText(optionText);
        System.out.println("Selected " + optionText + " from ${elementName}");`
        },
        waitForElement: {
          annotation: `@When("User waits for ${elementName} to be visible")`,
          signature: `public void ${methodName}()`,
          body: `        wait.until(ExpectedConditions.visibilityOfElementLocated(PageElements.${elementName}));
        System.out.println("${elementName} is now visible");`
        }
      };
      
      const template = stepTemplates[step.action] || {
        annotation: `@When("User performs ${step.action} on ${elementName}")`,
        signature: `public void ${methodName}()`,
        body: `        // TODO: Implement ${step.action} action for ${elementName}
        WebElement element = wait.until(ExpectedConditions.visibilityOfElementLocated(PageElements.${elementName}));
        // Add implementation for ${step.action}
        System.out.println("Performed ${step.action} on ${elementName}");`
      };
      
      return `    ${template.annotation}
    ${template.signature} {
        try {
${template.body}
        } catch (Exception e) {
            System.err.println("Failed to perform ${step.action} on ${elementName}: " + e.getMessage());
            throw e;
        }
    }
`;
    },
    
    generateStepDescription(step) {
      const elementName = this.generateElementName(step);
      
      const descriptions = {
        click: `user clicks on ${elementName}`,
        sendKeys: `user enters "${step.data}" in ${elementName}`,
        clear: `user clears ${elementName}`,
        hover: `user hovers over ${elementName}`,
        doubleClick: `user double clicks on ${elementName}`,
        rightClick: `user right clicks on ${elementName}`,
        scrollToView: `user scrolls to ${elementName}`,
        selectByText: `user selects "${step.data}" from ${elementName} dropdown`,
        waitForElement: `user waits for ${elementName} to be visible`
      };
      
      return descriptions[step.action] || `user performs ${step.action} on ${elementName}`;
    },
    
    toCamelCase(str) {
      return str.replace(/[^a-zA-Z0-9]/g, ' ')
                .trim()
                .split(' ')
                .filter(word => word.length > 0)
                .map((word, index) => 
                  index === 0 ? word.toLowerCase() : 
                  word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
                )
                .join('');
    },
    
    downloadFile(filename, content) {
      try {
        console.log(`Attempting to download: ${filename}`);
        
        // Create blob with UTF-8 encoding
        const blob = new Blob([content], { 
          type: 'text/plain;charset=utf-8' 
        });
        
        // Create download URL
        const url = URL.createObjectURL(blob);
        
        // Create temporary download link
        const downloadLink = document.createElement('a');
        downloadLink.href = url;
        downloadLink.download = filename;
        downloadLink.style.display = 'none';
        
        // Add to DOM, trigger click, then cleanup
        document.body.appendChild(downloadLink);
        downloadLink.click();
        
        // Cleanup after a brief delay
        setTimeout(() => {
          document.body.removeChild(downloadLink);
          URL.revokeObjectURL(url);
        }, 100);
        
        console.log(`‚úÖ Successfully downloaded: ${filename}`);
        
      } catch (error) {
        console.error(`‚ùå Download failed for ${filename}:`, error);
        
        // Fallback to showing content in new window
        this.fallbackDownload(filename, content);
      }
    },
    
    fallbackDownload(filename, content) {
      try {
        const newWindow = window.open('', '_blank');
        if (newWindow) {
          const htmlContent = `
            <!DOCTYPE html>
            <html>
            <head>
              <title>${filename}</title>
              <style>
                body { 
                  font-family: 'Courier New', monospace; 
                  margin: 20px; 
                  background: #f5f5f5; 
                }
                .header { 
                  background: #667eea; 
                  color: white; 
                  padding: 15px; 
                  border-radius: 8px; 
                  margin-bottom: 20px; 
                }
                .content { 
                  background: white; 
                  padding: 20px; 
                  border-radius: 8px; 
                  border: 1px solid #ddd; 
                  box-shadow: 0 2px 4px rgba(0,0,0,0.1); 
                }
                pre { 
                  white-space: pre-wrap; 
                  word-wrap: break-word; 
                  font-size: 12px; 
                  line-height: 1.4; 
                  margin: 0; 
                }
                .actions { 
                  margin: 20px 0; 
                  text-align: center; 
                }
                button { 
                  background: #667eea; 
                  color: white; 
                  border: none; 
                  padding: 10px 20px; 
                  border-radius: 6px; 
                  cursor: pointer; 
                  margin: 0 10px; 
                  font-size: 14px; 
                }
                button:hover { 
                  background: #5a6fd8; 
                }
                .warning { 
                  background: #fff3cd; 
                  border: 1px solid #ffeaa7; 
                  color: #856404; 
                  padding: 10px; 
                  border-radius: 6px; 
                  margin-bottom: 20px; 
                }
              </style>
            </head>
            <body>
              <div class="header">
                <h2>üìÑ ${filename}</h2>
                <p>Generated by Enhanced Test Automation Recorder</p>
              </div>
              
              <div class="warning">
                ‚ö†Ô∏è Automatic download failed. Please copy the content below and save it manually as: <strong>${filename}</strong>
              </div>
              
              <div class="actions">
                <button onclick="selectAll()">üìã Select All</button>
                <button onclick="copyToClipboard()">üìã Copy to Clipboard</button>
                <button onclick="window.close()">‚ùå Close</button>
              </div>
              
              <div class="content">
                <pre id="content">${content.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</pre>
              </div>
              
              <script>
                function selectAll() {
                  const content = document.getElementById('content');
                  const range = document.createRange();
                  range.selectNodeContents(content);
                  const selection = window.getSelection();
                  selection.removeAllRanges();
                  selection.addRange(range);
                }
                
                function copyToClipboard() {
                  selectAll();
                  try {
                    document.execCommand('copy');
                    alert('Content copied to clipboard!');
                  } catch (err) {
                    alert('Copy failed. Please select all and copy manually.');
                  }
                }
                
                // Auto-select content on load
                window.onload = function() {
                  selectAll();
                };
              </script>
            </body>
            </html>
          `;
          
          newWindow.document.write(htmlContent);
          newWindow.document.close();
          
          console.log(`Opened fallback window for: ${filename}`);
        } else {
          throw new Error('Failed to open new window');
        }
      } catch (fallbackError) {
        console.error('Fallback download also failed:', fallbackError);
        
        // Last resort: show alert with content
        alert(`Download failed for ${filename}. Content:\n\n${content.substring(0, 500)}...`);
      }
    },
    
    // Utility methods for advanced export features
    generateTestSuite() {
      return `package testSuite;

import org.junit.runner.RunWith;
import org.junit.runners.Suite;
import org.junit.runners.Suite.SuiteClasses;

/**
 * Test Suite - Generated by Enhanced Test Automation Recorder
 * Groups related test classes for execution
 */
@RunWith(Suite.class)
@SuiteClasses({
    // Add your test classes here
    // Example: LoginTest.class, UserManagementTest.class
})
public class RegressionTestSuite {
    // Test suite configuration
}`;
    },
    
    generatePomXml() {
      return `<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <groupId>com.automation</groupId>
    <artifactId>selenium-test-framework</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>
    
    <name>Selenium Test Automation Framework</name>
    <description>Generated by Enhanced Test Automation Recorder</description>
    
    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <selenium.version>4.15.0</selenium.version>
        <cucumber.version>7.14.0</cucumber.version>
        <junit.version>4.13.2</junit.version>
    </properties>
    
    <dependencies>
        <!-- Selenium WebDriver -->
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>\${selenium.version}</version>
        </dependency>
        
        <!-- Cucumber Dependencies -->
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-java</artifactId>
            <version>\${cucumber.version}</version>
        </dependency>
        
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-junit</artifactId>
            <version>\${cucumber.version}</version>
        </dependency>
        
        <!-- JUnit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>\${junit.version}</version>
        </dependency>
        
        <!-- WebDriverManager -->
        <dependency>
            <groupId>io.github.bonigarcia</groupId>
            <artifactId>webdrivermanager</artifactId>
            <version>5.5.3</version>
        </dependency>
        
        <!-- Logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>2.0.9</version>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.2.1</version>
                <configuration>
                    <testFailureIgnore>true</testFailureIgnore>
                </configuration>
            </plugin>
            
            <plugin>
                <groupId>net.masterthought</groupId>
                <artifactId>maven-cucumber-reporting</artifactId>
                <version>5.7.7</version>
                <executions>
                    <execution>
                        <id>execution</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <projectName>Selenium Test Automation</projectName>
                            <outputDirectory>\${project.build.directory}/cucumber-reports</outputDirectory>
                            <inputDirectory>\${project.build.directory}/cucumber-reports</inputDirectory>
                            <jsonFiles>
                                <param>**/*.json</param>
                            </jsonFiles>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>`;
    },
    
    exportFullProject() {
      // Extended export that includes additional project files
      const additionalFiles = {
        'pom.xml': this.generatePomXml(),
        'TestSuite.java': this.generateTestSuite(),
        'README.md': this.generateReadme()
      };
      
      return additionalFiles;
    },
    
    generateReadme() {
      return `# Selenium Test Automation Framework

Generated by **Enhanced Test Automation Recorder** on ${new Date().toISOString()}

## üìã Overview

This project contains automated test scripts generated from recorded user interactions. The framework uses:

- **Selenium WebDriver** for browser automation
- **Cucumber** for BDD (Behavior Driven Development)
- **JUnit** for test execution
- **Maven** for dependency management

## üöÄ Quick Start

### Prerequisites
- Java 11 or higher
- Maven 3.6 or higher
- Chrome/Firefox browser

### Setup
1. Clone or download this project
2. Open terminal in project directory
3. Run: \`mvn clean install\`

### Running Tests
\`\`\`bash
# Run all tests
mvn test

# Run specific feature
mvn test -Dcucumber.filter.tags="@UITest"

# Run with specific browser
mvn test -Dbrowser=firefox
\`\`\`

## üìÅ Project Structure

\`\`\`
src/
‚îú‚îÄ‚îÄ test/
‚îÇ   ‚îú‚îÄ‚îÄ java/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pageObjects/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ PageElements.java     # Web element locators
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ stepDefinitions/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ StepDefinitions.java  # Test step implementations
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ runner/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ TestRunner.java       # Test execution configuration
‚îÇ   ‚îî‚îÄ‚îÄ resources/
‚îÇ       ‚îú‚îÄ‚îÄ features/
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ UITest.feature        # BDD test scenarios
‚îÇ       ‚îî‚îÄ‚îÄ config.properties         # Test configuration
\`\`\`

## üîß Configuration

Edit \`config.properties\` to customize:
- Browser settings
- Application URLs
- Timeout values
- Reporting options

## üìä Reports

After test execution, find reports in:
- \`target/cucumber-reports/\` - Cucumber HTML reports
- \`target/surefire-reports/\` - JUnit reports

## üõ†Ô∏è Customization

### Adding New Tests
1. Record interactions using the Test Recorder extension
2. Export generated files
3. Add new scenarios to feature files
4. Implement custom step definitions as needed

### Page Object Pattern
This framework follows the Page Object Model pattern:
- Elements are centralized in \`PageElements.java\`
- Actions are implemented in step definitions
- Tests are written in Gherkin syntax

## üìù Generated Files Summary

- **PageElements.java**: Contains all web element locators
- **StepDefinitions.java**: Implements test step actions  
- **UITest.feature**: BDD test scenarios in Gherkin
- **TestRunner.java**: Test execution configuration
- **config.properties**: Framework configuration

## üîç Troubleshooting

### Common Issues
1. **WebDriver not found**: Install WebDriverManager dependency
2. **Element not found**: Verify XPath locators are correct
3. **Timeout errors**: Increase wait times in config.properties

### Debug Mode
Add this to enable debug logging:
\`\`\`java
System.setProperty("webdriver.chrome.verboseLogging", "true");
\`\`\`

## üìû Support

For issues with the Test Recorder extension or generated code:
1. Check browser console for errors
2. Verify element locators are unique
3. Update browser and extension to latest versions

---

Generated with ‚ù§Ô∏è by Akhil Karri
`;
    }
  };
  
  // Expose to global scope with namespace
  global.TestRecorderModules = global.TestRecorderModules || {};
  global.TestRecorderModules.ExportHandler = ExportHandler;
  
  console.log('ExportHandler module loaded');
  
})(window);